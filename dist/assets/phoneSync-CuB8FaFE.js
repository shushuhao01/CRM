var n=(i,s,e)=>new Promise((t,a)=>{var u=o=>{try{c(e.next(o))}catch(r){a(r)}},h=o=>{try{c(e.throw(o))}catch(r){a(r)}},c=o=>o.done?t(o.value):Promise.resolve(o.value).then(u,h);c((e=e.apply(i,s)).next())});class m{static syncCustomerPhone(s,e){return n(this,null,function*(){try{console.log("同步客户手机号:",{customerId:s,phoneRecord:e}),yield new Promise(a=>setTimeout(a,500));const t={success:!0,data:{id:Date.now(),customerId:s,phone:e.phone,remark:e.remark,createTime:new Date().toISOString(),operator:"系统自动同步"}};if(t.success)return this.notifyCustomerDetailUpdate(s),{success:!0,message:"客户手机号同步成功",data:t.data}}catch(t){return console.error("同步客户手机号失败:",t),{success:!1,message:"同步失败，网络错误"}}})}static syncContactPhone(s,e){return n(this,null,function*(){try{console.log("同步联系人手机号:",{contactId:s,phoneRecord:e}),yield new Promise(a=>setTimeout(a,500));const t={success:!0,data:{id:Date.now(),contactId:s,phone:e.phone,remark:e.remark,createTime:new Date().toISOString(),operator:"系统自动同步"}};if(t.success)return{success:!0,message:"联系人手机号同步成功",data:t.data}}catch(t){return console.error("同步联系人手机号失败:",t),{success:!1,message:"同步失败，网络错误"}}})}static batchSyncPhones(s){return n(this,null,function*(){const e=[];for(const t of s)if(t.type==="customer"){const a=yield this.syncCustomerPhone(t.id,t.phoneRecord);e.push(a)}else if(t.type==="contact"){const a=yield this.syncContactPhone(t.id,t.phoneRecord);e.push(a)}return e})}static notifyCustomerDetailUpdate(s){console.log("通知客户详情页更新数据:",s),window.dispatchEvent(new CustomEvent("customer-phone-updated",{detail:{customerId:s}}))}static validatePhone(s){return/^1[3-9]\d{9}$/.test(s)}static checkPhoneDuplicate(s,e){return e.includes(s)}}export{m as P};
